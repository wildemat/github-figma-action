name: Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "21"

      - name: Install dependencies
        run: yarn install

      - name: Cache yarn dependencies (for future runs)
        uses: actions/cache@v3
        if: hashFiles('yarn.lock') != ''
        with:
          path: ~/.cache/yarn
          key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Run tests with coverage
        run: yarn test:coverage

      - name: Display coverage summary
        run: |
          echo "## Coverage Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ -f coverage/coverage-summary.json ]; then
            echo "```json" >> $GITHUB_STEP_SUMMARY
            cat coverage/coverage-summary.json >> $GITHUB_STEP_SUMMARY
            echo "```" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üìä **Coverage Badge Updated:** $(date)" >> $GITHUB_STEP_SUMMARY

      - name: Comment coverage summary on PR
        if: github.event_name == 'pull_request' && github.event.action != 'closed'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            if (!fs.existsSync('coverage/coverage-summary.json')) {
              console.log('No coverage summary found');
              return;
            }
            
            const coverage = JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'));
            const total = coverage.total;
            
            const comment = `## üìä Test Coverage Summary
            
            | Metric | Percentage | Covered | Total |
            |--------|------------|---------|-------|
            | **Statements** | ${total.statements.pct}% | ${total.statements.covered} | ${total.statements.total} |
            | **Branches** | ${total.branches.pct}% | ${total.branches.covered} | ${total.branches.total} |
            | **Functions** | ${total.functions.pct}% | ${total.functions.covered} | ${total.functions.total} |
            | **Lines** | ${total.lines.pct}% | ${total.lines.covered} | ${total.lines.total} |
            
            <details>
            <summary>üìÅ File Coverage Details</summary>
            
            \`\`\`json
            ${JSON.stringify(coverage, null, 2)}
            \`\`\`
            
            </details>
            
            ---
            *Coverage report generated on ${new Date().toISOString()}*`;
            
            // Find existing coverage comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const existingComment = comments.find(comment => 
              comment.body.includes('## üìä Test Coverage Summary')
            );
            
            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: comment
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }

      - name: Generate coverage badge
        uses: tj-actions/coverage-badge-js@v2
        if: github.ref == 'refs/heads/main'
        with:
          output_path: coverage/coverage-badge.svg

      - name: Verify and rename coverage files
        if: github.ref == 'refs/heads/main'
        run: |
          echo "Generated files:"
          ls -la coverage/
          
          # Check if coverage-summary.json exists
          if [ -f coverage/coverage-summary.json ]; then
            echo "Coverage summary:"
            cat coverage/coverage-summary.json
          fi
          
          # Handle different badge file names the action might generate
          if [ -f coverage/badge.svg ]; then
            mv coverage/badge.svg coverage/coverage-badge.svg
            echo "Renamed badge.svg to coverage-badge.svg"
          fi
          
          if [ -f coverage/coverage-badge.svg ]; then
            echo "Coverage badge exists:"
            ls -la coverage/coverage-badge.svg
          else
            echo "Coverage badge NOT found"
          fi

      - name: Commit coverage badge and lockfile
        if: github.ref == 'refs/heads/main'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          echo "Current git status:"
          git status
          
          # Add yarn.lock if it exists
          if [ -f yarn.lock ]; then
            git add yarn.lock
            echo "Added yarn.lock"
          fi
          
          # Add coverage badge if it exists
          if [ -f coverage/coverage-badge.svg ]; then
            git add coverage/coverage-badge.svg
            echo "Added coverage badge"
          fi
          
          echo "Staged changes:"
          git diff --cached --name-only
          
          # Only commit and push if there are staged changes
          if ! git diff --cached --quiet; then
            echo "Committing changes..."
            git commit -m "Update coverage badge and lockfile"
            echo "Pushing to remote..."
            git push
            echo "Push completed successfully"
          else
            echo "No changes to commit"
          fi